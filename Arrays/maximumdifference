 #maximum difference between two elements in an array such that larger element appears after the smaller number 
 #naive approach
 static void maxDiff(int[] arr, int k){
        int max=0;
        int currmax=0;
        for (int i = 0; i <k; i++)
        {
            for(int j=i+1;j<k;j++)
            {
                max=arr[j]-arr[i];
                if(max>currmax)
                currmax=max;
            }
        }
        if(currmax==0 ||currmax<0)
         System.out.println(-1);
         else
         System.out.println(currmax);   
    }
 #TimeComplexity : O(n^2)
 #SpaceComplexity : O(1)
 
 #optimized approach 
#take the difference with the minimum element found so far
Static int maxDiff(int arr[], int n)  
    { 
        int maxdiff = arr[1] - arr[0]; 
        int minelement = arr[0];  
        for (int i = 1; i < n; i++)  
        { 
            if (arr[i] - minelement > maxdiff) 
                maxdiff = arr[i] - minelement; 
            if (arr[i] < minelement) 
                minelement = arr[i]; 
        } 
        return maxdiff; 
    } 
  #Timecomplexity : O(n)
  #SpaceComplexity : O(1)
  
  
