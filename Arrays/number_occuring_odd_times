 #finding the element occurring odd number of times
 #naive approach
static void oddOccurence(int arr[], int n) 
    { 
        int i; 
        for (i = 0; i < n; i++) { 
            int count = 0; 
            for (int j = 0; j < n; j++) { 
                if (arr[i] == arr[j]) 
                    count++; 
            } 
            if (count % 2 != 0) 
                System.out.println(arr[i]);
        } 
        System.out.println("-1");
    } 

 Time Complexity : O(n^2)
 Space Complexity : O(1)
 
#using hashmaps 
static void oddOccurence(int arr[],int n)
{
HashMap<Integer,Integer> hashmap = new HashMap<>(); 
for(int i = 0; i < n; i++) { 
            if(hmap.containsKey(arr[i])) 
            { 
               hashmap.put(arr[i], hashmap.get(arr[i]) + 1);  
            } 
            else
               hashmap.put(arr[i], 1);  
 } 
  for(Integer a:hmap.keySet()) 
  { 
  if(hashmap.get(a) % 2 != 0) 
     System.out.println(a); 
   } 
        System.out.println("-1"); 
}
#Time complexity : O(n)
#Space complexity : O(n)

#using XOR
int oddOccurrence(int ar[], int ar_size)  
    { 
        int i; 
        int res = 0; 
        for (i = 0; i < ar_size; i++)  
        { 
            res = res ^ ar[i]; 
        } 
        return res; 
    } 
