#naive approach
static void printPairs(int arr[], 
                       int n, int sum) 
{ 
    int count = 0; 
  
    // Consider all possible pairs  
    // and check their sums 
    for (int i = 0; i < n; i++) 
        for (int j = i + 1; j < n; j++) 
            if (arr[i] + arr[j] == sum)
            {
                count++;
                System.out.println( "(" + arr[i] +  
                                    ", " + arr[j] +  
                                              ")"); 
                                              
            }
} 

#Time Complexity : O(n2)
#Auxiliary Space : O(1)


#using hasing approach
public static int printSumPairs(int []input, int k){
    Map<Integer, Integer> pairs = new HashMap<Integer, Integer>();
 int count=0;
    for(int i=0;i<input.length;i++){

        if(pairs.containsKey(input[i]))
        {
            System.out.println(input[i] +", "+ pairs.get(input[i]));
            count++;
        }
        else
            pairs.put(k-input[i], input[i]);
    }
return count;
}

#Time Complexity : O(n) iterating only once through the array --> O(n) time ;Insertion and lookup time in Hash is O(1).
#Auxiliary Space : O(n)
